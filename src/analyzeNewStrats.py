from os import listdir
from os.path import isfile, join
from src.GlobalVars import PATH
import numpy as np
import matplotlib.pylab as pl


def get_strategy_file_names(path=join(PATH, 'contrib/males/E/resultsTmp')):
    return [f for f in listdir(path) if isfile(join(path, f))]


def get_strat_overlap():
    new_strats = get_strategy_file_names()
    old_strats = get_strategy_file_names(join(PATH, 'data/TESTRUNS_PEGASUS/'))
    return list(set(new_strats) & set(old_strats))


def load_new_strat(filename, path=join(PATH, 'contrib/males/E/resultsTmp/')):
    new_strat = {}
    firstline = True
    with open(path + filename, 'r') as inputstream:
        for line in inputstream:
            if firstline:
                firstline = False
            else:
                sline = line.split()
                new_strat[sline[0].split('/')[6]] = [float(sline[1])]
    return new_strat


def load_old_strat(filename, new_strat, path=join(PATH, 'data/TESTRUNS_PEGASUS/')):
    firstline = True
    both_strats = new_strat.copy()
    with open(path + filename, 'r') as inputstream:
        for line in inputstream:
            if firstline:
                firstline = False
            else:
                sline = line.split()
                if sline[0] in new_strat.keys():
                    if sline[1] == 'T':
                        both_strats[sline[0]].append(float(sline[2]))
                    else:
                        both_strats[sline[0]].append(-1)
    return both_strats


def get_all_probs(all_strats):
    all_keys = []
    for strat in all_strats:
        all_keys += strat.keys()
    return list(set(all_keys))


def load_all_strats():
    overlap = get_strat_overlap()
    all_strats = []
    for lap in overlap:
        new_strat = load_new_strat(lap)
        both_strats = load_old_strat(lap, new_strat)
        all_strats.append(both_strats)
    return all_strats, overlap


def generate_ratio_matrix(all_strats,strat_names,all_probs):
    # Ratios are generated by dividing the old value by the new value
    rat = np.zeros((len(all_probs), len(all_strats)))
    for i, strat in enumerate(all_strats):
        for j, prob in enumerate(all_probs):
            if prob in strat.keys():
                rat[j, i] = strat[prob][0] / strat[prob][1]
    return rat

def plot_distribution(ratio_mat):
    averages = []
    for line in ratio_mat:
        averages.append(np.average((line[line>0])))
    pl.hist(averages,bins=15)
    pl.show()

def get_average_t_for_probs(all_strats, all_probs):
    times = []
    for prob in all_probs:
        for strat in all_strats:
            if prob in strat.keys():
                if strat[prob][0] > 0 and strat[prob][1] > 0:
                    times.append((strat[prob][0],(strat[prob][0]/strat[prob][1])))
    return np.array(times)

def get_average_t_for_probs_per_strat(all_strats, all_probs):
    times = []
    for strat in all_strats:
        strat_times = []
        for prob in all_probs:
            if prob in strat.keys():
                if strat[prob][0] > 0 and strat[prob][1] > 0:
                    strat_times.append((strat[prob][0], (strat[prob][0]/strat[prob][1])))
        times.append(strat_times)
    return times

def plot_scatter(times):
    pl.scatter(times[:,0], times[:,1])
    pl.xlabel('Time in seconds')
    pl.ylabel('Ratio')
    pl.title('Time in seconds versus the ratio')
    pl.xlim(0, 300)
    pl.xscale('log')
    pl.show()

def plot_scatter_per_strat(times):
    colors = ['r', 'b', 'g', 'y']
    for t,col in zip(times, colors):
        t_temp = np.array(t)
        pl.scatter(t_temp[:,0], t_temp[:,1], c=col)

    pl.xlabel('Time in seconds')
    pl.ylabel('Ratio')
    pl.title('Time in seconds versus the ratio')
    pl.xlim(0,300)
    pl.show()

all_strats, strat_names = load_all_strats()
all_probs = get_all_probs(all_strats)
ratios = generate_ratio_matrix(all_strats,strat_names, all_probs)
times = get_average_t_for_probs_per_strat(all_strats, all_probs)
plot_scatter_per_strat(times)
