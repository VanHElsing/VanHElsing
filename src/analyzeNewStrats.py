from os import listdir
from os.path import isfile, join
from src.GlobalVars import PATH
import numpy as np
import matplotlib.pylab as pl


def get_strategy_file_names(path=join(PATH, 'contrib/males/E/resultsTmp')):
    return [f for f in listdir(path) if isfile(join(path, f))]


def get_strat_overlap():
    new_strats = get_strategy_file_names()
    old_strats = get_strategy_file_names(join(PATH, 'data/TESTRUNS_PEGASUS/'))
    return list(set(new_strats) & set(old_strats))


def load_new_strat(filename, path=join(PATH, 'contrib/males/E/resultsTmp/')):
    new_strat = {}
    firstline = True
    with open(path + filename, 'r') as inputstream:
        for line in inputstream:
            if firstline:
                firstline = False
            else:
                sline = line.split()
                new_strat[sline[0].split('/')[6]] = [float(sline[1])]
    return new_strat


def load_old_strat(filename, new_strat, path=join(PATH, 'data/TESTRUNS_PEGASUS/')):
    firstline = True
    both_strats = new_strat.copy()
    with open(path + filename, 'r') as inputstream:
        for line in inputstream:
            if firstline:
                firstline = False
            else:
                sline = line.split()
                if sline[0] in new_strat.keys():
                    if sline[1] == 'T':
                        both_strats[sline[0]].append(float(sline[2]))
                    else:
                        both_strats[sline[0]].append(-1)
    return both_strats


def get_all_probs(all_strats):
    all_keys = []
    for strat in all_strats:
        all_keys += strat.keys()
    return list(set(all_keys))


def load_all_strats():
    overlap = get_strat_overlap()
    all_strats = []
    for lap in overlap:
        new_strat = load_new_strat(lap)
        both_strats = load_old_strat(lap, new_strat)
        all_strats.append(both_strats)
    return all_strats, overlap


def generate_ratio_matrix():
    # Ratios are generated by dividing the old value by the new value
    all_strats, strat_names = load_all_strats()
    all_probs = get_all_probs(all_strats)
    rat = np.zeros((len(all_probs), len(all_strats)))
    for i, strat in enumerate(all_strats):
        for j, prob in enumerate(all_probs):
            if prob in strat.keys():
                rat[j, i] = strat[prob][0] / strat[prob][1]
    return rat, strat_names, all_probs

def plot_distribution(ratio_mat):
    averages = []
    for line in ratio_mat:
        averages.append(np.average((line[line>0])))
    pl.hist(averages,bins=15)
    pl.show()

ratios, x, y = generate_ratio_matrix()
plot_distribution(ratios)

# print dist

