'''
General IO functions.
'''

import ConfigParser
import os
import subprocess
import shlex
from lib import TimeoutThread
from cPickle import dump, load


def expand_filename(file_name):
    '''
    Tries to find file_name in both the local directory and the TPTP directory.
    If it finds a file, returns a working path.

    Parameters
    ----------
    file_name : string
        The name of the file of which the path has to be found

    Returns
    -------
    file_path : string
        The path to the file_name from the parameters
    '''
    # Try local directory
    if os.path.isfile(file_name):
        return file_name
    # Try TPTP env
    tptp_dir = os.getenv('TPTP')
    if tptp_dir is None:
        raise IOError(11, ('Cannot find problem file %s and the TPTP\
                           environment is not defined.') % file_name)
    file_path = os.path.join(tptp_dir, file_name)
    if os.path.isfile(file_path):
        return file_path
    # Cannot find file
    raise IOError(12, 'Cannot find problem file %s or %s. ' %
                  (file_name, file_path))


def load_config(config_file):
    '''
    Parses a configuration file.

    Parameters
    ----------
    config_file : string
        Name of the config file that has to be loaded and parsed

    Returns
    -------
    configuration : SafeConfigParser
        Configuration that has been parsed from a file
    '''
    if not os.path.exists(config_file):
        raise IOError(10, 'Cannot find configuration file %s' %
                      config_file)
    configuration = ConfigParser.SafeConfigParser()
    configuration.optionxform = str
    configuration.read(config_file)
    return configuration


def run_command(command, time_out):
    '''
    Runs command with a time_out and return the resultcode, stdout and stderr

    Parameters
    ----------
    command : String
        Represents the command that has to be run_command
    time_out : int
        How long it takes until the subprocess times out

    Returns
    -------
    resultcode : int
        The resultcode of the subprocess
    stdout : string
        The output generated by the process
    stderr : string
        A possible error generated by the process
    '''
    args = shlex.split(command)
    proc = subprocess.Popen(args, stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE, preexec_fn=os.setsid)
    with TimeoutThread.processTimeout(time_out, proc.pid):
        stdout, stderr = proc.communicate()
    resultcode = proc.wait()
    return resultcode, stdout, stderr


def load_object(filename):
    '''
    Loads an object from a file.

    Parameters
    ----------
    filename : String
        Name of the file containing the object

    Returns
    -------
    data : object
        Object that was gotten from the file with the filename
    '''
    handle = open(filename)
    data = load(handle)
    handle.close()
    return data


def save_object(obj, filename):
    '''
    Saves an object to a file.

    Parameters
    ----------
    obj : object
        Objec which has to be written to a file
    filename : String
        Name of the file that will contain the object
    '''
    handle = open(filename, 'w')
    dump(obj, handle)
    handle.close()
    return
