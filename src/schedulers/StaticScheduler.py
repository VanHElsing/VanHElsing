from src.schedulers.SchedulerTemplate import StrategyScheduler


BEST_STRAT = [(0, 0.155284), (2, 0.011533), (4, 5.185016), (5, 1.170449), (6, 0.202317), (7, 1.109039), (9, 15.080778), (11, 1.818854), (12, 1.497516), (13, 1.2389), (17, 0.060048), (18, 0.164728), (19, 1.641254), (20, 1.521191), (21, 0.170199), (23, 0.965984), (24, 0.13333), (25, 0.001128), (26, 13.027402), (27, 9.687177), (32, 6.627978), (33, 0.866161), (37, 0.432883), (39, 3.341965), (42, 2.948525), (48, 35.925665), (49, 4.020516), (50, 0.003318), (51, 0.494985), (52, 0.058165), (56, 0.669329), (57, 3.077164), (58, 1.067322), (59, 0.001711), (60, 10.06089), (62, 0.428117), (63, 0.40645), (64, 0.011105), (69, 0.76444), (72, 1.784454), (73, 1.116603), (74, 0.128177), (75, 7.377867), (80, 12.691153), (84, 1.797385), (87, 2.661845), (88, 0.529627), (90, 1.701926), (94, 1.318541), (95, 1.040019), (98, 0.69694), (99, 0.056348), (100, 0.233617), (101, 0.188946), (103, 9.470107), (104, 0.636152), (106, 0.048733), (112, 2.85446), (116, 0.065298), (118, 0.895612), (124, 2.214404), (129, 2.982474), (131, 1.973045), (132, 0.534936), (133, 20.099117), (134, 18.119609), (135, 10.881266), (138, 0.036987), (144, 2.909091), (148, 0.01802), (149, 0.270495), (150, 1.729664), (151, 12.112612), (154, 0.29838), (157, 0.725373), (158, 1.367599), (163, 0.12313), (166, 0.635718), (170, 2.858529), (173, 0.194877), (181, 5.325922), (182, 0.068455), (183, 40.892832), (184, 0.105423), (185, 0.179416)]


class StaticScheduler(StrategyScheduler):
    def __init__(self, config=None):
        StrategyScheduler.__init__(self, config)
        self.i = 0
        self.strategies = None

    def fit(self, data_set, max_time):
        self.strategies = [(data_set.strategies[i], t) for (i, t) in BEST_STRAT]

    def predict(self, time_left):
        return self.strategies[self.i]

    def set_problem_and_features(self, problem_file, dummy_features):
        self.set_problem(problem_file)

    def set_problem(self, problem_file):
        self.i = 0

    def update(self):
        self.i = (self.i + 1) % len(self.strategies)

    def reset(self):
        self.i = 0
